{"version":3,"sources":["App.module.css","assets/cerf.svg","assets/Gameboy.svg","assets/space.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","s","app","style","backgroundColor","page","name","src","cerf","alt","description","gameboy","flexDirection","space","maxWidth","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kFACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,KAAO,kBAAkB,KAAO,kBAAkB,YAAc,2B,kBCDzGD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,uMCqD5BC,MA9Cf,WACE,OACE,yBAAKC,UAAWC,IAAEC,KAChB,yBAAKC,MAAO,CAAEC,gBAAiB,cAAgBJ,UAAWC,IAAEI,MAC1D,yBAAKL,UAAWC,IAAEK,MAAlB,kBAEF,yBAAKH,MAAO,CAAEC,gBAAiB,WAAaJ,UAAWC,IAAEI,MACvD,yBAAKE,IAAKC,IAAMC,IAAI,SACpB,yBAAKT,UAAWC,IAAES,aAAlB,uQAOF,yBAAKP,MAAO,CAAEC,gBAAiB,aAAeJ,UAAWC,IAAEI,MACzD,yBAAKL,UAAWC,IAAES,aAAlB,gVAOA,yBAAKH,IAAKI,IAASF,IAAI,aAEzB,yBACEN,MAAO,CAAEC,gBAAiB,UAAWQ,cAAe,UACpDZ,UAAWC,IAAEI,MAEb,yBACEE,IAAKM,IACLJ,IAAI,QACJN,MAAO,CAAEW,SAAU,UAAWC,UAAW,MAE3C,yBAAKf,UAAWC,IAAES,YAAaP,MAAO,CAAEY,UAAW,IAAnD,kYC7BYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.403cb53d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__9PGIl\",\"page\":\"App_page__1fe8B\",\"name\":\"App_name__O1emH\",\"description\":\"App_description__EDcFw\"};","module.exports = __webpack_public_path__ + \"static/media/cerf.4946b9f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/Gameboy.c6eb4a72.svg\";","module.exports = __webpack_public_path__ + \"static/media/space.00d4f504.svg\";","import React from 'react'\r\n\r\nimport cerf from './assets/cerf.svg'\r\nimport gameboy from './assets/Gameboy.svg'\r\nimport s from './App.module.css'\r\nimport space from './assets/space.svg'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className={s.app}>\r\n      <div style={{ backgroundColor: 'dodgerblue' }} className={s.page}>\r\n        <div className={s.name}>Franck Paulos</div>\r\n      </div>\r\n      <div style={{ backgroundColor: 'hotpink' }} className={s.page}>\r\n        <img src={cerf} alt=\"cerf\" />\r\n        <div className={s.description}>\r\n          Si les rois ont voulu être inhumés dans une peau de cerf nappant leur\r\n          dépouille mortelle, c’est qu’elle a la vertu, elle qui vivante\r\n          ressuscitait chaque année par ses bois, de montrer à l’âme le chemin\r\n          de la vie éternelle.\r\n        </div>\r\n      </div>\r\n      <div style={{ backgroundColor: '#7700faa3' }} className={s.page}>\r\n        <div className={s.description}>\r\n          La Game Boy est une console portable de jeu vidéo 8-bits de quatrième\r\n          génération développée et fabriquée par Nintendo. Mise en vente au\r\n          Japon le 21 avril 1989, puis en Amérique du Nord en octobre 1989, et\r\n          enfin en Europe le 28 septembre 1990, elle est la première console\r\n          portable de la gamme des Game Boy\r\n        </div>\r\n        <img src={gameboy} alt=\"gameboy\" />\r\n      </div>\r\n      <div\r\n        style={{ backgroundColor: '#0d2330', flexDirection: 'column' }}\r\n        className={s.page}\r\n      >\r\n        <img\r\n          src={space}\r\n          alt=\"space\"\r\n          style={{ maxWidth: 'inherit', marginTop: 64 }}\r\n        />\r\n        <div className={s.description} style={{ marginTop: 0 }}>\r\n          L’univers, c’est tout ce que l’on peut toucher, détecter, sentir,\r\n          mesurer ou déceler. Il comprend les êtres et organismes vivants, les\r\n          planètes, les étoiles, les galaxies, les nuages de poussières, la\r\n          lumière et même le temps. Avant la naissance de l’univers, les notions\r\n          de temps, d’espace et de matière n’existaient pas.\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}